class VersatileLLM:
    def __init__(self, api_key):
        self.api_key = api_key
        openai.api_key = self.api_key

    def generate_text(self, prompt, model="gpt-4"):
        response = openai.Completion.create(
            model=model,
            prompt=prompt,
            max_tokens=150
        )
        return response.choices[0].text.strip()

    def generate_graph(self, data):
        plt.figure(figsize=(10, 6))
        plt.plot(data)
        plt.title('Sample Graph')
        plt.xlabel('X-axis')
        plt.ylabel('Y-axis')
        plt.grid(True)
        plt.show()

    def basic_computation(self):
        array = np.array([1, 2, 3, 4])
        result = np.sum(array)
        return result

    def symbolic_computation(self):
        x = sp.symbols('x')
        expr = x**2 + 2*x + 1
        derivative = sp.diff(expr, x)
        return derivative

    def execute_python_code(self, code):
        exec_globals = {}
        exec(code, exec_globals)
        return exec_globals

    def generate_image(self, prompt):
        response = openai.Image.create(
            prompt=prompt,
            n=1,
            size="1024x1024"
        )
        return response['data'][0]['url']

# Example usage
llm = VersatileLLM(api_key="your_openai_api_key")
print(llm.generate_text("Write a story about a dragon."))
llm.generate_graph(np.random.randn(100).cumsum())
print(llm.basic_computation())
print(llm.symbolic_computation())
exec_globals = llm.execute_python_code("result = 5 + 10")
print(exec_globals['result'])
print(llm.generate_image("A beautiful mountain landscape"))
